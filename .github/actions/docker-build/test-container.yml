name: 'Test Docker Container'
description: 'Runs tests against a built Docker container'
inputs:
  image_name:
    description: 'Full name of the Docker image (repository/image)'
    required: true
  tag:
    description: 'Tag of the Docker image to test'
    required: true
  registry:
    description: 'Container registry where the image is stored'
    required: true
    default: 'ghcr.io'
  test_script:
    description: 'Path to a test script to run against the container'
    required: false
  timeout:
    description: 'Timeout in seconds for the container startup test'
    required: false
    default: '60'

runs:
  using: "composite"
  steps:
    - name: Pull image for testing
      shell: bash
      run: |
        echo "::group::Pulling Docker image for testing"
        IMAGE_REF="${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}"
        echo "Pulling image: $IMAGE_REF"
        docker pull "$IMAGE_REF"
        echo "::endgroup::"

    - name: Basic container startup test
      shell: bash
      run: |
        echo "::group::Testing container startup"
        IMAGE_REF="${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}"

        # Setup test network
        docker network create zabbix-test-network

        # Start the container with health check
        CONTAINER_ID=$(docker run -d --name zabbix-proxy-test \
          --network zabbix-test-network \
          -e ZBX_SERVER_HOST=dummy-zabbix-server \
          -e ZBX_HOSTNAME=zabbix-proxy-test \
          -e ZBX_TIMEOUT=10 \
          "$IMAGE_REF")

        echo "Container started with ID: $CONTAINER_ID"

        # Wait for container to initialize
        echo "Waiting for container to initialize (max ${{ inputs.timeout }}s)..."
        TIMEOUT=${{ inputs.timeout }}
        COUNTER=0

        while [ $COUNTER -lt $TIMEOUT ]; do
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' $CONTAINER_ID)

          if [ "$CONTAINER_STATUS" = "running" ]; then
            echo "Container is running, checking logs..."
            LOGS=$(docker logs $CONTAINER_ID)

            if echo "$LOGS" | grep -q "Starting Zabbix Proxy"; then
              echo "✅ Container started successfully!"
              break
            fi
          fi

          COUNTER=$((COUNTER+5))
          echo "Waiting... ($COUNTER/$TIMEOUT)"
          sleep 5
        done

        if [ $COUNTER -ge $TIMEOUT ]; then
          echo "❌ Container failed to start properly within timeout"
          docker logs $CONTAINER_ID
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          docker network rm zabbix-test-network
          exit 1
        fi

        # Display container logs
        echo "Container logs:"
        docker logs $CONTAINER_ID
        echo "::endgroup::"

    - name: Run custom test script
      if: inputs.test_script != ''
      shell: bash
      run: |
        echo "::group::Running custom test script"
        IMAGE_REF="${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}"

        # Make script executable
        chmod +x "${{ inputs.test_script }}"

        # Run the test script with the image ref as argument
        "${{ inputs.test_script }}" "$IMAGE_REF"
        TEST_EXIT_CODE=$?

        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "❌ Custom test script failed with exit code: $TEST_EXIT_CODE"
          exit $TEST_EXIT_CODE
        else
          echo "✅ Custom test script passed"
        fi
        echo "::endgroup::"

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        echo "::group::Cleaning up test resources"
        # Stop and remove the test container
        docker stop zabbix-proxy-test || true
        docker rm zabbix-proxy-test || true

        # Remove the test network
        docker network rm zabbix-test-network || true
        echo "::endgroup::"
