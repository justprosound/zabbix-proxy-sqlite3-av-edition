name: 'Setup and Verify Build Environment'
description: 'Checks out code, sets up Docker Buildx, and verifies prerequisites for building the container.'

inputs:
  zabbix_version:
    description: 'The Zabbix version to check for the upstream image.'
    required: true
  repo_name_var:
    description: 'The REPO_NAME variable from the calling workflow.'
    required: false
    default: 'zabbix-proxy-sqlite3-av-edition'
  base_name_var:
    description: 'The BASE_NAME variable from the calling workflow.'
    required: false
    default: 'Zabbix Proxy SQLite3 AV Edition'
  github_token:
    description: 'The GitHub token for logging into the container registry.'
    required: true

outputs:
  image_name:
    description: 'The calculated name for the Docker image.'
    value: ${{ steps.repo_analysis.outputs.image_name }}
  registry:
    description: 'The container registry to use.'
    value: ${{ steps.repo_analysis.outputs.registry }}
  repo_owner:
    description: 'The owner of the repository.'
    value: ${{ steps.repo_analysis.outputs.repo_owner }}
  repo_name:
    description: 'The name of the repository.'
    value: ${{ steps.repo_analysis.outputs.repo_name }}
  build_date:
    description: 'The ISO-8601 timestamp for the build.'
    value: ${{ steps.build_timestamp.outputs.DATE }}
  upstream_exists:
    description: 'Whether the upstream Zabbix image exists.'
    value: ${{ steps.check_upstream_image.outputs.upstream_exists }}

runs:
  using: "composite"
  steps:
    - name: Verify repository integrity
      run: |
        echo "Verifying repository state..."
        git fsck --no-progress --no-dangling
        echo "Repository integrity check passed"
      shell: bash

    - name: Determine repository and image names
      id: repo_analysis
      run: |
        # Get actual repository name from github.repository
        ACTUAL_REPO="${{ github.repository }}"
        ACTUAL_REPO_NAME="${ACTUAL_REPO#*/}"
        REPO_OWNER="${{ github.repository_owner }}"

        echo "Repository: $ACTUAL_REPO"
        echo "Repository Owner: $REPO_OWNER"
        echo "Repository Name: $ACTUAL_REPO_NAME"

        # Check if we need to adjust the image name based on repo name
        IMAGE_NAME="${{ inputs.repo_name_var }}"

        # Default registry - hardcode to ghcr.io for security
        REGISTRY="ghcr.io"

        if [[ "$ACTUAL_REPO_NAME" != "zabbix-proxy-sqlite3-av-edition" ]]; then
          echo "Repository name differs from default template"
          # Try to extract a meaningful name - remove common prefixes/suffixes
          CLEANED_NAME=$(echo "$ACTUAL_REPO_NAME" | sed -E 's/(zabbix|proxy|sqlite|edition|av)[-_]?//gi' | sed -E 's/[-_]?(zabbix|proxy|sqlite|edition|av)//gi')
          # If we have a cleaned name that's different and not empty, use it as a prefix
          if [[ -n "$CLEANED_NAME" && "$CLEANED_NAME" != "$ACTUAL_REPO_NAME" && "$CLEANED_NAME" != "-" ]]; then
            # Only add prefix if it makes sense
            if [[ "$IMAGE_NAME" != *"$CLEANED_NAME"* ]]; then
              IMAGE_NAME="${CLEANED_NAME}-${IMAGE_NAME}"
              echo "Adjusted image name to: $IMAGE_NAME"
            fi
          fi
        fi

        echo "Final image name: $IMAGE_NAME"
        echo "Final registry: $REGISTRY"
        echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
        echo "repo_owner=${REPO_OWNER}" >> $GITHUB_OUTPUT
        echo "repo_name=${ACTUAL_REPO_NAME}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate build timestamp
      id: build_timestamp
      run: echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:latest

    - name: Verify upstream Zabbix image exists
      id: check_upstream_image
      continue-on-error: true
      run: |
        UPSTREAM_IMAGE="zabbix/zabbix-proxy-sqlite3:ubuntu-${{ inputs.zabbix_version }}"
        echo "Checking if upstream image exists: $UPSTREAM_IMAGE"

        # Attempt to pull the image to verify it exists
        if docker pull "$UPSTREAM_IMAGE" &>/dev/null; then
          echo "✅ Upstream image $UPSTREAM_IMAGE exists and is accessible"
          echo "upstream_exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ERROR: Upstream image $UPSTREAM_IMAGE does not exist or is not accessible"
          echo "::warning::Upstream image $UPSTREAM_IMAGE not found! Build will likely fail."
          echo "upstream_exists=false" >> $GITHUB_OUTPUT

          # Add information to step summary
          echo "## ⚠️ Upstream Image Verification Failed" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| ------ | ------- |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | Upstream image \`$UPSTREAM_IMAGE\` does not exist or is not accessible |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Impact | The build will likely fail as it depends on this base image |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Resolution | Verify that the Zabbix version specified is correct and available |" >> $GITHUB_STEP_SUMMARY
        fi
      shell: bash

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github_token }}
