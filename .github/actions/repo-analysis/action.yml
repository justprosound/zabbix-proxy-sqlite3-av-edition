name: 'Repository Analysis'
description: 'Analyze repository and determine appropriate image name and other repository information'
inputs:
  image-name:
    description: 'Default image name to use if not determined from repository'
    required: false
    default: 'zabbix-proxy-sqlite3-av-edition'

outputs:
  image_name:
    description: 'The image name determined from repository analysis'
    value: ${{ steps.repo_analysis.outputs.image_name }}
  registry:
    description: 'The registry to use for the image'
    value: ${{ steps.repo_analysis.outputs.registry }}
  repo_owner:
    description: 'The repository owner'
    value: ${{ steps.repo_analysis.outputs.repo_owner }}
  repo_name:
    description: 'The repository name'
    value: ${{ steps.repo_analysis.outputs.repo_name }}
  timestamp:
    description: 'The timestamp for the build'
    value: ${{ steps.build_timestamp.outputs.DATE }}

runs:
  using: 'composite'
  steps:
    # Security: Verify checkout integrity
    - name: Verify repository integrity
      shell: bash
      run: |
        echo "Verifying repository state..."
        git fsck --no-progress --no-dangling
        echo "Repository integrity check passed"

    # Analyze repository and determine appropriate image name
    - name: Determine repository and image names
      id: repo_analysis
      shell: bash
      run: |
        # Get actual repository name from github.repository
        ACTUAL_REPO="${{ github.repository }}"
        ACTUAL_REPO_NAME="${ACTUAL_REPO#*/}"
        REPO_OWNER="${{ github.repository_owner }}"

        echo "Repository: $ACTUAL_REPO"
        echo "Repository Owner: $REPO_OWNER"
        echo "Repository Name: $ACTUAL_REPO_NAME"

        # Check if we need to adjust the image name based on repo name
        IMAGE_NAME="${{ inputs.image-name }}"

        # Default registry - hardcode to ghcr.io for security
        REGISTRY="ghcr.io"

        if [[ "$ACTUAL_REPO_NAME" != "zabbix-proxy-sqlite3-av-edition" ]]; then
          echo "Repository name differs from default template"
          # Try to extract a meaningful name - remove common prefixes/suffixes
          CLEANED_NAME=$(echo "$ACTUAL_REPO_NAME" | sed -E 's/(zabbix|proxy|sqlite|edition|av)[-_]?//gi' | sed -E 's/[-_]?(zabbix|proxy|sqlite|edition|av)//gi')
          # If we have a cleaned name that's different and not empty, use it as a prefix
          if [[ -n "$CLEANED_NAME" && "$CLEANED_NAME" != "$ACTUAL_REPO_NAME" && "$CLEANED_NAME" != "-" ]]; then
            # Only add prefix if it makes sense
            if [[ "$IMAGE_NAME" != *"$CLEANED_NAME"* ]]; then
              IMAGE_NAME="${CLEANED_NAME}-${IMAGE_NAME}"
              echo "Adjusted image name to: $IMAGE_NAME"
            fi
          fi
        fi

        echo "Final image name: $IMAGE_NAME"
        echo "Final registry: $REGISTRY"
        echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
        echo "repo_owner=${REPO_OWNER}" >> $GITHUB_OUTPUT
        echo "repo_name=${ACTUAL_REPO_NAME}" >> $GITHUB_OUTPUT

    # Generate reproducible build timestamp in ISO-8601 format
    - name: Generate build timestamp
      id: build_timestamp
      shell: bash
      run: echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
