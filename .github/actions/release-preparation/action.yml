name: 'Release Preparation'
description: 'Prepare release notes and assets for GitHub release'
inputs:
  local_version:
    description: 'Local version with patch increment if needed'
    required: true
  zabbix_version:
    description: 'Zabbix version'
    required: true
  major_minor:
    description: 'Major.minor version'
    required: true
  is_local_change:
    description: 'Whether local changes were detected'
    required: true
  is_lts:
    description: 'Whether this is an LTS version'
    required: true
  should_tag_latest:
    description: 'Whether this version should be tagged as latest'
    required: true
  registry:
    description: 'Registry for the image'
    required: true
  image_name:
    description: 'Image name'
    required: true

outputs:
  assets:
    description: 'List of assets to include in the release'
    value: ${{ steps.prepare_assets.outputs.assets }}

runs:
  using: 'composite'
  steps:
    - name: Extract SBOM from built image
      shell: bash
      continue-on-error: true
      run: |
        # Set up image reference for extraction
        REGISTRY="${{ inputs.registry }}"
        OWNER="${{ github.repository_owner }}"
        IMG_NAME="${{ inputs.image_name }}"
        VERSION="${{ inputs.local_version }}"
        IMAGE_TAG="$REGISTRY/$OWNER/$IMG_NAME:$VERSION"
        CONTAINER_ID=$(docker create $IMAGE_TAG)
        docker cp $CONTAINER_ID:/usr/local/share/zabbix-proxy-sbom.txt ./zabbix-proxy-sbom-${{ inputs.local_version }}.txt
        docker rm $CONTAINER_ID

    - name: Verify image metadata
      shell: bash
      run: |
        echo "## OCI Metadata Validation" >> $GITHUB_STEP_SUMMARY

        # Use outputs from previous steps and environment variables
        REGISTRY="${{ inputs.registry }}"
        OWNER="${{ github.repository_owner }}"
        IMG_NAME="${{ inputs.image_name }}"
        VERSION="${{ inputs.local_version }}"
        IMAGE_TAG="$REGISTRY/$OWNER/$IMG_NAME:$VERSION"

        echo "Inspecting image metadata for $IMAGE_TAG..." >> $GITHUB_STEP_SUMMARY
        # Use docker inspect to get the labels - using a variable to avoid YAML parser issues with curly braces
        LABELS=$(docker inspect --format='{{json .Config.Labels}}' $IMAGE_TAG 2>/dev/null || echo '{}')

        # Check if we got any labels
        if [ "$LABELS" = "{}" ]; then
          echo ":warning: Could not retrieve labels from image. Verification skipped." >> $GITHUB_STEP_SUMMARY
        else
          echo "| Label | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | ----- |" >> $GITHUB_STEP_SUMMARY

          # Check for required OCI labels
          for LABEL in "org.opencontainers.image.title" "org.opencontainers.image.version" "org.opencontainers.image.base.name" "org.opencontainers.image.revision"; do
            VALUE=$(echo $LABELS | jq -r ".[\"$LABEL\"]")
            if [ -n "$VALUE" ] && [ "$VALUE" != "null" ]; then
              echo "| $LABEL | \`$VALUE\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $LABEL | :x: Missing |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi

    - name: Check for SBOM file in image
      shell: bash
      run: |
        echo "## SBOM Extraction Verification" >> $GITHUB_STEP_SUMMARY
        SBOM="./zabbix-proxy-sbom-${{ inputs.local_version }}.txt"

        if [ -f "$SBOM" ]; then
          echo ":white_check_mark: SBOM file successfully extracted from image" >> $GITHUB_STEP_SUMMARY

          # Verify SBOM content
          REQUIRED_TOOLS=(zabbix-proxy-sqlite3 kubectl jq nmap fping mtr traceroute iproute2 snmpwalk curl wget expect jo nano gnupg tcpdump netcat)

          # Check either Ookla speedtest or Cloudflare speedtest
          if grep -q "^ookla-speedtest:" "$SBOM" || grep -q "^cloudflare-speedtest:" "$SBOM"; then
            echo ":white_check_mark: At least one speedtest implementation found" >> $GITHUB_STEP_SUMMARY
          else
            echo ":x: No speedtest implementation found" >> $GITHUB_STEP_SUMMARY
            MISSING=1
          fi
          MISSING=0

          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          for TOOL in "${REQUIRED_TOOLS[@]}"; do
            if ! grep -q "^$TOOL:" "$SBOM"; then
              echo ":x: $TOOL version not found in SBOM" >> $GITHUB_STEP_SUMMARY
              MISSING=1
            elif grep -q "^$TOOL: Not installed properly" "$SBOM"; then
              echo ":warning: $TOOL installed but may have issues - $(grep "^$TOOL:" "$SBOM")" >> $GITHUB_STEP_SUMMARY
              MISSING=1
            else
              VERSION=$(grep "^$TOOL:" "$SBOM" | sed 's/^[^:]*: //')
              echo ":white_check_mark: $TOOL version found: $VERSION" >> $GITHUB_STEP_SUMMARY
            fi
          done

          if [ "$MISSING" -eq 1 ]; then
            echo "::warning::Some required tools are missing from the SBOM or have installation issues. See summary for details."
          else
            echo "All required tools are present in the SBOM."
          fi
        else
          echo ":x: SBOM file not extracted from image" >> $GITHUB_STEP_SUMMARY
          echo "::warning::Could not extract SBOM from image."
        fi

    - name: Generate release notes
      id: release_notes
      shell: bash
      run: |
        LOCAL_VERSION="${{ inputs.local_version }}"
        BASE_VERSION="${{ inputs.zabbix_version }}"
        MAJOR_MINOR="${{ inputs.major_minor }}"
        IS_LTS="${{ inputs.is_lts }}"
        IS_LOCAL_CHANGE="${{ inputs.is_local_change }}"
        SHOULD_TAG_LATEST="${{ inputs.should_tag_latest }}"

        cat > release_notes.md << EOF
        # 🐱 Zabbix Proxy SQLite3 AV Edition - v$LOCAL_VERSION

        This is a specialized container image for Zabbix Proxy with SQLite3 storage, tailored for AV system monitoring.

        ### 🔍 Version Information
        - **Base Zabbix Version**: $BASE_VERSION
        - **Local Version**: $LOCAL_VERSION
        - **Based on**: [zabbix/zabbix-proxy-sqlite3:ubuntu-$BASE_VERSION](https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3/tags?name=ubuntu-$BASE_VERSION)

        ### 🔒 Security Features
        - **Immutability**: Read-only container filesystem
        - **Minimal Attack Surface**: Only essential monitoring tools included
        - **No Shell Access**: Container itself is never modified after creation

        ### 🛠️ Container Features
        - **Network Monitoring**: ping, traceroute, mtr, fping, nmap, netcat
        - **SNMP Support**: Full SNMP toolkit with MIB support
        - **Kubernetes**: kubectl for container orchestration monitoring
        - **Speed Testing**: Dual implementation (Cloudflare Speedtest & Ookla Speedtest CLI)
        - **Custom Scripts**: AV-specific monitoring utilities

        ### 📊 Security Assets
        - **SBOMs**: This release includes two Software Bill of Materials files:
           - \`zabbix-proxy-sbom-$LOCAL_VERSION.txt\`: Custom detailed SBOM with tool versions
           - \`sbom-spdx.json\`: Standard SPDX format for automated scanning
        - **Security Scans**: Multiple vulnerability scans performed during build:
           - Dockerfile scan: Early detection of vulnerabilities in build instructions
           - Container image scan: Comprehensive scan of the final container image using Anchore Grype
           - Results available in GitHub Security tab

        ### 📥 Container Images
        Pull this image from the GitHub Container Registry:

        ```bash
        # Pull this specific version
        docker pull ${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image_name }}:$LOCAL_VERSION
        ```

        ### 📋 Container Metadata
        This image includes comprehensive OCI metadata for reproducible builds:
        - **Title**: Zabbix Proxy SQLite3 for AV Systems
        - **Version**: $LOCAL_VERSION
        - **Created**: $(date -u +'%Y-%m-%d %H:%M UTC')
        - **Source**: ${{ github.server_url }}/${{ github.repository }}
        - **Revision**: Full git commit SHA
        - **Documentation**: README.md in repository
        - **License**: AGPL-3.0

        ### 🏷️ Available Tags
        - \`${LOCAL_VERSION}\` - This specific version
        - \`${MAJOR_MINOR}\` - Latest patch for this major.minor
        $(if [ "$IS_LOCAL_CHANGE" = "false" ]; then echo "- \`${BASE_VERSION}\` - Upstream Zabbix version"; fi)
        $(if [ "$IS_LTS" = "true" ]; then echo "- \`lts\` - Long-Term Support version"; fi)
        $(if [ "$SHOULD_TAG_LATEST" = "true" ]; then echo "- \`latest\` - Latest version with highest version number"; fi)
        EOF

    - name: Prepare release assets
      id: prepare_assets
      shell: bash
      run: |
        ASSETS=""
        SBOM_FILE="./zabbix-proxy-sbom-${{ inputs.local_version }}.txt"
        SPDX_FILE="./sbom-spdx.json"

        if [ -f "$SBOM_FILE" ]; then
          ASSETS="${ASSETS}${SBOM_FILE}\n"
          echo "SBOM file exists and will be included in release"
        fi

        if [ -f "$SPDX_FILE" ]; then
          ASSETS="${ASSETS}${SPDX_FILE}"
          echo "SPDX file exists and will be included in release"
        fi

        echo "assets<<EOF" >> $GITHUB_OUTPUT
        echo -e "$ASSETS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
