name: 'Generate SBOM'
description: 'Generates Software Bill of Materials for container images'
inputs:
  image:
    description: 'Container image to generate SBOM for'
    required: true
  version:
    description: 'Version tag for the image'
    required: true
outputs:
  sbom_file:
    description: 'Path to the generated SBOM file'
    value: ${{ steps.anchore_sbom_generation.outputs.sbom_file }}
  spdx_file:
    description: 'Path to the generated SPDX file'
    value: ${{ steps.spdx_sbom.outputs.spdx_file }}

runs:
  using: "composite"
  steps:
    - name: Generate SPDX SBOM
      uses: aquasecurity/trivy-action@master
      id: spdx_sbom
      continue-on-error: true
      with:
        image-ref: ${{ inputs.image }}
        format: 'spdx-json'
        output: 'sbom-spdx.json'

    - name: Validate SPDX SBOM contents
      id: validate_spdx_sbom
      shell: bash
      if: success() && steps.spdx_sbom.outcome == 'success' && steps.spdx_sbom.conclusion == 'success'
      run: |
        echo "## SPDX SBOM Validation" >> $GITHUB_STEP_SUMMARY
        echo "spdx_file=sbom-spdx.json" >> $GITHUB_OUTPUT

        # Check if the file exists and has content
        if [ -f "sbom-spdx.json" ] && [ -s "sbom-spdx.json" ]; then
          echo ":white_check_mark: SPDX SBOM file exists and has content" >> $GITHUB_STEP_SUMMARY

          # Count packages
          PACKAGE_COUNT=$(jq '.packages | length' sbom-spdx.json)
          echo ":information_source: Contains information on $PACKAGE_COUNT packages" >> $GITHUB_STEP_SUMMARY

          # Check for critical tools
          for TOOL in "zabbix" "sqlite" "python" "snmp"; do
            if jq -e ".packages[] | select(.name | test(\"$TOOL\"; \"i\"))" sbom-spdx.json > /dev/null; then
              echo ":white_check_mark: Found SBOM entries related to: $TOOL" >> $GITHUB_STEP_SUMMARY
            else
              echo ":warning: No SBOM entries found for key component: $TOOL" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo ":x: SPDX SBOM file is missing or empty" >> $GITHUB_STEP_SUMMARY
          echo "::warning::SPDX SBOM file is missing or empty"
        fi

    - name: Generate CycloneDX SBOM
      uses: anchore/sbom-action@v0
      id: anchore_sbom_generation
      continue-on-error: true
      with:
        image: ${{ inputs.image }}
        artifact-name: sbom-${{ inputs.version }}.spdx.json
        output-file: ./sbom-${{ inputs.version }}.json
        format: cyclonedx-json
        dependency-snapshot: true

    - name: Debug SBOM file format
      shell: bash
      if: success() && steps.anchore_sbom_generation.outcome == 'success' && steps.anchore_sbom_generation.conclusion == 'success'
      run: |
        SBOM_FILE="./sbom-${{ inputs.version }}.json"
        echo "sbom_file=$SBOM_FILE" >> $GITHUB_OUTPUT

        echo "## SBOM File Format Debug" >> $GITHUB_STEP_SUMMARY

        if [ -f "$SBOM_FILE" ] && [ -s "$SBOM_FILE" ]; then
          echo "SBOM file exists and has content" >> $GITHUB_STEP_SUMMARY
          echo "File size: $(stat -c%s "$SBOM_FILE") bytes" >> $GITHUB_STEP_SUMMARY

          # Check if file is valid JSON
          if jq . "$SBOM_FILE" > /dev/null 2>&1; then
            echo ":white_check_mark: File is valid JSON" >> $GITHUB_STEP_SUMMARY

            # Extract key structure information for diagnosis
            echo "### SBOM Top-Level Structure" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq 'keys' "$SBOM_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # Check if it has the expected CycloneDX format
            if jq -e '.bomFormat == "CycloneDX"' "$SBOM_FILE" > /dev/null; then
              echo ":white_check_mark: File follows CycloneDX format" >> $GITHUB_STEP_SUMMARY

              # Extract component count for reference
              COMPONENT_COUNT=$(jq '.components | length' "$SBOM_FILE")
              echo "Contains $COMPONENT_COUNT components" >> $GITHUB_STEP_SUMMARY

              # Sample first component for format inspection
              echo "### Sample Component Format" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              jq '.components[0]' "$SBOM_FILE" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo ":warning: File doesn't follow expected CycloneDX format" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo ":x: File is not valid JSON" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo ":x: SBOM file is missing or empty" >> $GITHUB_STEP_SUMMARY
        fi
