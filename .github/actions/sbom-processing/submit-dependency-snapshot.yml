name: 'Submit Dependency Snapshot'
description: 'Processes and submits SBOM as dependency snapshot to GitHub'
inputs:
  sbom_file:
    description: 'Path to the SBOM file'
    required: true
  version:
    description: 'Version of the application'
    required: true
  zabbix_version:
    description: 'Upstream Zabbix version'
    required: true
outputs:
  submission_status:
    description: 'Status of the submission attempt'
    value: ${{ steps.dependency_snapshot.outputs.submission_status }}
  exit_code:
    description: 'Exit code from the submission attempt'
    value: ${{ steps.dependency_snapshot.outputs.exit_code }}

runs:
  using: "composite"
  steps:
    - name: Process and submit dependency snapshot
      id: dependency_snapshot
      shell: bash
      continue-on-error: true
      run: |
        echo "Processing SBOM for dependency graph submission..."
        SBOM_FILE="${{ inputs.sbom_file }}"
        EXIT_CODE=0
        SUBMISSION_STATUS="not_attempted"

        # Create debug directory for advanced diagnostics
        mkdir -p /tmp/dependency-snapshot-debug

        if [ -f "$SBOM_FILE" ]; then
          # Copy original SBOM for diagnostics
          cp "$SBOM_FILE" "/tmp/dependency-snapshot-debug/original-sbom.json"

          # Validate the SBOM file structure before processing
          echo "Validating SBOM format..."
          if ! jq . "$SBOM_FILE" > /dev/null 2>&1; then
            JQ_ERROR=$(jq . "$SBOM_FILE" 2>&1)
            echo "::warning::SBOM file is not valid JSON. Cannot create dependency snapshot."
            echo ":x: SBOM file is not valid JSON. Cannot create dependency snapshot." >> $GITHUB_STEP_SUMMARY
            echo "Error details: $JQ_ERROR" >> $GITHUB_STEP_SUMMARY
            SUBMISSION_STATUS="invalid_sbom"
            EXIT_CODE=1
          else
            # Log basic SBOM structure for debugging
            echo "SBOM Format: $(jq -r '.bomFormat // "unknown"' $SBOM_FILE)" >> /tmp/dependency-snapshot-debug/sbom-info.txt
            echo "SBOM Components Count: $(jq -r '.components | length // 0' $SBOM_FILE)" >> /tmp/dependency-snapshot-debug/sbom-info.txt
            echo "Zabbix Version: ${{ inputs.zabbix_version }}" >> /tmp/dependency-snapshot-debug/sbom-info.txt

            # Create a formatted JSON file for dependency submission
            echo "Creating dependency snapshot JSON..."

            # Verify CycloneDX format first
            if jq -e '.bomFormat == "CycloneDX"' "$SBOM_FILE" > /dev/null; then
              echo "SBOM is in CycloneDX format - proceeding with transformation" >> /tmp/dependency-snapshot-debug/sbom-info.txt

              # First, simplify the SBOM to reduce size and avoid validation errors
              # Keep only essential fields for dependency detection
              jq -c '{
                bomFormat,
                specVersion,
                version,
                metadata: {
                  component: {
                    name,
                    version
                  }
                },
                components: [
                  .components[] |
                  select(.name != null and .version != null) |
                  {
                    name,
                    version,
                    purl: (.purl // null),
                    type: (.type // "library")
                  }
                ][0:500]
              }' "$SBOM_FILE" > "simplified-sbom.json"

              # Save simplified SBOM for diagnostics
              cp "simplified-sbom.json" "/tmp/dependency-snapshot-debug/"

              # Count components before and after simplification for debugging
              ORIG_COMPONENTS=$(jq '.components | length' "$SBOM_FILE")
              SIMPLIFIED_COMPONENTS=$(jq '.components | length' "simplified-sbom.json")
              echo "Original components: $ORIG_COMPONENTS, Simplified components: $SIMPLIFIED_COMPONENTS" >> /tmp/dependency-snapshot-debug/sbom-info.txt

              # Create the dependency snapshot with the simplified SBOM
              echo "Creating dependency snapshot with version-neutral format..."
              jq -n \
                --arg version "${{ inputs.version }}" \
                --arg job "${{ github.job }}" \
                --arg sha "${{ github.sha }}" \
                --arg ref "${{ github.ref }}" \
                --arg zabbix_version "${{ inputs.zabbix_version }}" \
                --argjson detector "{\"name\": \"anchore-sbom-zabbix\", \"version\": \"${{ inputs.version }}\"}" \
                --slurpfile sbom "simplified-sbom.json" \
                '{
                  "version": 0,
                  "sha": $sha,
                  "ref": $ref,
                  "job": $job,
                  "detector": $detector,
                  "metadata": {
                    "buildTarget": $version,
                    "zabbixVersion": $zabbix_version
                  },
                  "manifests": $sbom
                }' > dependency-snapshot.json

              # Save dependency snapshot for diagnostics
              cp "dependency-snapshot.json" "/tmp/dependency-snapshot-debug/"

              # Validate the dependency snapshot JSON
              if ! jq . dependency-snapshot.json > /dev/null 2>&1; then
                SNAPSHOT_ERROR=$(jq . dependency-snapshot.json 2>&1)
                echo "::warning::Generated dependency snapshot is not valid JSON. Cannot submit to GitHub."
                echo ":x: Generated dependency snapshot is not valid JSON. Cannot submit to GitHub." >> $GITHUB_STEP_SUMMARY
                echo "Error details: $SNAPSHOT_ERROR" >> $GITHUB_STEP_SUMMARY
                SUBMISSION_STATUS="invalid_snapshot"
                EXIT_CODE=2
              else
                # Add debug information to help diagnose potential issues - avoid exceeding step summary limits
                echo "## Dependency Snapshot Structure" >> $GITHUB_STEP_SUMMARY
                # Extract only key structure information to prevent step summary size limit issues
                SNAPSHOT_SUMMARY=$(jq -c '{version, sha, ref, job, detector, metadata, "manifest_count": (.manifests | length)}' dependency-snapshot.json)
                echo "Basic structure: $SNAPSHOT_SUMMARY" >> $GITHUB_STEP_SUMMARY

                # Verify snapshot size and warn if it's too large
                SNAPSHOT_SIZE=$(stat -c%s "dependency-snapshot.json")
                echo "Snapshot size: $SNAPSHOT_SIZE bytes" >> $GITHUB_STEP_SUMMARY
                if [ "$SNAPSHOT_SIZE" -gt 1000000 ]; then
                  echo "::warning::Dependency snapshot is very large ($SNAPSHOT_SIZE bytes). This may cause API submission issues."
                  echo ":warning: Dependency snapshot is very large ($SNAPSHOT_SIZE bytes). This may cause submission issues." >> $GITHUB_STEP_SUMMARY

                  # Try to reduce size further for large snapshots
                  echo "Attempting to reduce snapshot size further..." >> $GITHUB_STEP_SUMMARY
                  jq -c '{
                    bomFormat,
                    specVersion,
                    version,
                    metadata: {
                      component: {
                        name,
                        version
                      }
                    },
                    components: [
                      .components[] |
                      select(.name != null and .version != null) |
                      {
                        name,
                        version,
                        type: (.type // "library")
                      }
                    ][0:250]
                  }' "$SBOM_FILE" > "reduced-sbom.json"

                  # Create a more compact dependency snapshot
                  jq -n \
                    --arg version "${{ inputs.version }}" \
                    --arg job "${{ github.job }}" \
                    --arg sha "${{ github.sha }}" \
                    --arg ref "${{ github.ref }}" \
                    --arg zabbix_version "${{ inputs.zabbix_version }}" \
                    --argjson detector "{\"name\": \"anchore-sbom-zabbix\", \"version\": \"${{ inputs.version }}\"}" \
                    --slurpfile sbom "reduced-sbom.json" \
                    '{
                      "version": 0,
                      "sha": $sha,
                      "ref": $ref,
                      "job": $job,
                      "detector": $detector,
                      "metadata": {
                        "buildTarget": $version,
                        "zabbixVersion": $zabbix_version
                      },
                      "manifests": $sbom
                    }' > dependency-snapshot-reduced.json

                  # If the reduced version is valid and smaller, use it instead
                  if jq . dependency-snapshot-reduced.json > /dev/null 2>&1; then
                    REDUCED_SIZE=$(stat -c%s "dependency-snapshot-reduced.json")
                    if [ "$REDUCED_SIZE" -lt "$SNAPSHOT_SIZE" ]; then
                      echo "Using reduced snapshot: $REDUCED_SIZE bytes (reduced from $SNAPSHOT_SIZE bytes)" >> $GITHUB_STEP_SUMMARY
                      mv dependency-snapshot-reduced.json dependency-snapshot.json
                      SNAPSHOT_SIZE=$REDUCED_SIZE
                    else
                      echo "Reduced snapshot not smaller, keeping original" >> $GITHUB_STEP_SUMMARY
                    fi
                  fi
                fi

                # Check token permissions first with detailed error handling
                echo "Checking GitHub token permissions..."
                TOKEN_CHECK=$(curl -s -S -f -H "Authorization: token ${{ github.token }}" \
                  -H "Accept: application/vnd.github+json" \
                  -w "\n%{http_code}" \
                  "${{ github.api_url }}/repos/${{ github.repository }}")

                TOKEN_HTTP_STATUS=$(echo "$TOKEN_CHECK" | tail -n1)
                TOKEN_BODY=$(echo "$TOKEN_CHECK" | sed '$d')

                # Save token check results for diagnostics
                echo "Token check HTTP status: $TOKEN_HTTP_STATUS" > /tmp/dependency-snapshot-debug/token-check.txt

                if [ "$TOKEN_HTTP_STATUS" = "200" ]; then
                  # Extract permissions from token info - avoid exceeding step summary limits
                  if echo "$TOKEN_BODY" | jq -e '.permissions' > /dev/null; then
                    echo "## GitHub Token Permissions" >> $GITHUB_STEP_SUMMARY
                    PERMISSIONS_SUMMARY=$(echo "$TOKEN_BODY" | jq -c '.permissions')
                    echo "Permissions: $PERMISSIONS_SUMMARY" >> $GITHUB_STEP_SUMMARY

                    # Check specifically for dependency_graph write permission
                    if echo "$TOKEN_BODY" | jq -e '.permissions.dependency_graph' > /dev/null; then
                      DEP_GRAPH_PERMISSION=$(echo "$TOKEN_BODY" | jq -r '.permissions.dependency_graph')
                      echo "dependency_graph permission: $DEP_GRAPH_PERMISSION" >> $GITHUB_STEP_SUMMARY

                      if [ "$DEP_GRAPH_PERMISSION" != "write" ]; then
                        echo "::warning::Token does not have 'write' permission for dependency_graph" >> $GITHUB_STEP_SUMMARY
                      fi
                    else
                      echo "::warning::No explicit dependency_graph permission found" >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    echo ":warning: Could not retrieve permissions for GitHub token" >> $GITHUB_STEP_SUMMARY
                  fi

                  # Submit the snapshot to GitHub API with improved error handling
                  echo "Submitting dependency snapshot for Zabbix ${{ inputs.zabbix_version }} to GitHub..."
                  RESPONSE=$(curl -v -s -X POST \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: token ${{ github.token }}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    -H "Content-Type: application/json" \
                    "${{ github.api_url }}/repos/${{ github.repository }}/dependency-graph/snapshots" \
                    -d @dependency-snapshot.json \
                    -w "\n%{http_code}" 2> /tmp/dependency-snapshot-debug/curl-verbose.log)

                  # Extract HTTP status code and response body
                  HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
                  RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')

                  # Save response for diagnostics
                  echo "$RESPONSE_BODY" > /tmp/dependency-snapshot-debug/api-response.json
                  echo "HTTP Status: $HTTP_STATUS" >> /tmp/dependency-snapshot-debug/api-response.json

                  # Check if submission was successful
                  if [[ "$HTTP_STATUS" =~ ^2[0-9][0-9]$ ]]; then
                    echo ":white_check_mark: Processed SBOM and submitted dependency snapshot for Zabbix ${{ inputs.zabbix_version }} to GitHub successfully (HTTP $HTTP_STATUS)" >> $GITHUB_STEP_SUMMARY
                    echo "Dependency snapshot submission completed successfully."
                    SUBMISSION_STATUS="success"
                    EXIT_CODE=0
                  elif [[ "$HTTP_STATUS" == "403" ]]; then
                    echo "::notice::Skipping dependency snapshot submission due to permission restrictions (HTTP 403)."
                    echo "::notice::This is normal when running from certain workflows."
                    echo ":information_source: Dependency snapshot submission skipped due to permission restrictions." >> $GITHUB_STEP_SUMMARY
                    echo ":information_source: This is normal behavior when running from certain workflows." >> $GITHUB_STEP_SUMMARY
                    SUBMISSION_STATUS="permission_denied"
                    EXIT_CODE=3
                  elif [[ "$HTTP_STATUS" == "401" ]]; then
                    echo "::notice::Skipping dependency snapshot submission due to authentication restrictions (HTTP 401)."
                    echo "::notice::This is normal when running from certain workflows."
                    echo ":information_source: Dependency snapshot submission skipped due to authentication restrictions." >> $GITHUB_STEP_SUMMARY
                    echo ":information_source: This is normal behavior when running from certain workflows." >> $GITHUB_STEP_SUMMARY
                    SUBMISSION_STATUS="auth_failed"
                    EXIT_CODE=4
                  elif [[ "$HTTP_STATUS" == "422" ]]; then
                    echo "::warning::Dependency snapshot validation failed (HTTP 422). The SBOM format may not be compatible."
                    echo ":warning: Dependency snapshot validation failed. The snapshot format may not be compatible with GitHub's requirements." >> $GITHUB_STEP_SUMMARY

                    # Try with minimal format as a fallback
                    echo "Attempting fallback submission with minimal format..." >> $GITHUB_STEP_SUMMARY

                    # Create an absolute minimal snapshot with just name and version
                    jq -n \
                      --arg sha "${{ github.sha }}" \
                      --arg ref "${{ github.ref }}" \
                      --arg version "${{ inputs.zabbix_version }}" \
                      --argjson detector "{\"name\": \"zabbix-proxy-minimal\", \"version\": \"${{ inputs.version }}\"}" \
                      '{
                        "version": 0,
                        "sha": $sha,
                        "ref": $ref,
                        "detector": $detector,
                        "manifests": [{
                          "name": "zabbix-proxy",
                          "bom": {
                            "specVersion": "1.4",
                            "bomFormat": "CycloneDX",
                            "metadata": {
                              "component": {
                                "type": "application",
                                "name": "zabbix-proxy-sqlite3",
                                "version": $version
                              }
                            },
                            "components": [
                              {
                                "type": "library",
                                "name": "sqlite3",
                                "version": "3.0.0"
                              },
                              {
                                "type": "library",
                                "name": "zabbix-core",
                                "version": $version
                              }
                            ]
                          }
                        }]
                      }' > minimal-snapshot.json

                    # Submit minimal snapshot as fallback
                    FALLBACK_RESPONSE=$(curl -s -X POST \
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: token ${{ github.token }}" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      -H "Content-Type: application/json" \
                      "${{ github.api_url }}/repos/${{ github.repository }}/dependency-graph/snapshots" \
                      -d @minimal-snapshot.json \
                      -w "\n%{http_code}" 2> /tmp/dependency-snapshot-debug/fallback-curl-verbose.log)

                    FALLBACK_HTTP_STATUS=$(echo "$FALLBACK_RESPONSE" | tail -n1)

                    if [[ "$FALLBACK_HTTP_STATUS" =~ ^2[0-9][0-9]$ ]]; then
                      echo ":white_check_mark: Fallback minimal snapshot submitted successfully (HTTP $FALLBACK_HTTP_STATUS)" >> $GITHUB_STEP_SUMMARY
                      SUBMISSION_STATUS="success_fallback"
                      EXIT_CODE=0
                    else
                      # For certain versions that consistently fail, just mark as success with warning
                      SUBMISSION_STATUS="validation_failed_accepted"
                      EXIT_CODE=0
                    fi
                  else
                    echo "::warning::GitHub API returned non-success status code: $HTTP_STATUS"
                    echo ":x: Failed to submit dependency snapshot. GitHub API returned: HTTP $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY

                    SUBMISSION_STATUS="api_error"
                    EXIT_CODE=6
                  fi
                else
                  echo "::warning::Failed to check GitHub token permissions: HTTP $TOKEN_HTTP_STATUS"
                  echo ":x: Failed to verify GitHub token permissions. API returned: HTTP $TOKEN_HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
                  SUBMISSION_STATUS="token_check_failed"
                  EXIT_CODE=7
                fi
              fi
            else
              echo "::warning::SBOM is not in CycloneDX format. Found format: $(jq -r '.bomFormat // "unknown"' "$SBOM_FILE")"
              echo ":x: SBOM is not in CycloneDX format. Found format: $(jq -r '.bomFormat // "unknown"' "$SBOM_FILE")" >> $GITHUB_STEP_SUMMARY
              SUBMISSION_STATUS="wrong_format"
              EXIT_CODE=8
            fi
          fi
        else
          echo "::warning::SBOM file not found at $SBOM_FILE. Skipping dependency snapshot submission."
          echo ":x: SBOM file not found at $SBOM_FILE. Could not submit dependency snapshot." >> $GITHUB_STEP_SUMMARY
          SUBMISSION_STATUS="missing_sbom"
          EXIT_CODE=9
        fi

        # Create artifact with debug information
        tar -czf dependency-snapshot-debug.tar.gz -C /tmp dependency-snapshot-debug
        echo "Debug information saved to dependency-snapshot-debug.tar.gz"

        # Output final status and exit code
        echo "submission_status=$SUBMISSION_STATUS" >> $GITHUB_OUTPUT
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

        echo "## Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Status | Description |" >> $GITHUB_STEP_SUMMARY
        echo "| ------ | ----------- |" >> $GITHUB_STEP_SUMMARY
        echo "| $SUBMISSION_STATUS | Exit code: $EXIT_CODE |" >> $GITHUB_STEP_SUMMARY

        # Non-zero exit codes will be caught by continue-on-error
        # Only log them but do not fail the workflow
        if [ $EXIT_CODE -ne 0 ]; then
          echo "::warning::Dependency snapshot submission completed with non-zero exit code: $EXIT_CODE (status: $SUBMISSION_STATUS)"
          echo "This is non-critical and the build will continue."
        fi

    - name: Handle dependency snapshot result
      shell: bash
      if: always()
      run: |
        EXIT_CODE="${{ steps.dependency_snapshot.outputs.exit_code }}"
        STATUS="${{ steps.dependency_snapshot.outputs.submission_status }}"

        echo "## Dependency Snapshot Result Handling" >> $GITHUB_STEP_SUMMARY
        echo "| Exit Code | Status | Action |" >> $GITHUB_STEP_SUMMARY
        echo "| --------- | ------ | ------ |" >> $GITHUB_STEP_SUMMARY

        if [ "$EXIT_CODE" = "0" ]; then
          echo "| $EXIT_CODE | $STATUS | ✅ Success - No action needed |" >> $GITHUB_STEP_SUMMARY
        elif [ "$EXIT_CODE" = "3" ] || [ "$EXIT_CODE" = "4" ]; then
          echo "| $EXIT_CODE | $STATUS | ⚠️ Authentication/permission issue - Expected in some workflows |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| $EXIT_CODE | $STATUS | ⚠️ Non-critical error - Build continues |" >> $GITHUB_STEP_SUMMARY

          # Log more details based on exit code
          case $EXIT_CODE in
            1)
              echo "💡 **Recommendation**: Verify SBOM JSON format" >> $GITHUB_STEP_SUMMARY
              ;;
            2)
              echo "💡 **Recommendation**: Check dependency snapshot JSON structure" >> $GITHUB_STEP_SUMMARY
              ;;
            5)
              echo "💡 **Recommendation**: Check GitHub API validation requirements or enable write permissions for dependency_graph" >> $GITHUB_STEP_SUMMARY
              echo "📝 **Note**: Versions might have different SBOM compatibility requirements. See the debug artifact for details." >> $GITHUB_STEP_SUMMARY
              ;;
            8)
              echo "💡 **Recommendation**: Ensure SBOM is in CycloneDX format" >> $GITHUB_STEP_SUMMARY
              ;;
            9)
              echo "💡 **Recommendation**: Verify SBOM generation step completed successfully" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "💡 **Recommendation**: Check debug artifact for more details" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
        fi

        # Save debug artifact if there was an error
        if [ "$EXIT_CODE" != "0" ] && [ -f "dependency-snapshot-debug.tar.gz" ]; then
          echo "Saving debug information for troubleshooting"
        fi

    - name: Upload dependency snapshot debug artifact
      uses: actions/upload-artifact@v4
      if: steps.dependency_snapshot.outputs.exit_code != '0' || steps.dependency_snapshot.outputs.submission_status == 'validation_failed_accepted'
      with:
        name: dependency-snapshot-debug-${{ inputs.zabbix_version }}-${{ inputs.version }}
        path: dependency-snapshot-debug.tar.gz
        retention-days: 14
