name: â—† reusable | Docker Hub Tag Discovery

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
        description: "Docker Hub repository name (e.g., 'zabbix/zabbix-proxy-sqlite3')"
      tag_pattern:
        required: false
        type: string
        default: '^ubuntu-[0-9]+\.[0-9]+\.[0-9]+$'
        description: "Regex pattern to filter tags (default: ubuntu-x.y.z tags)"
      min_version:
        required: false
        type: string
        default: '0.0.0'
        description: "Minimum version to include (e.g., '7.0.0')"
    outputs:
      all_tags:
        description: "All discovered tags matching the pattern"
        value: ${{ jobs.fetch-dockerhub-tags.outputs.all_tags }}
      all_versions:
        description: "All versions extracted from tags"
        value: ${{ jobs.fetch-dockerhub-tags.outputs.all_versions }}

jobs:
  fetch-dockerhub-tags:
    runs-on: ubuntu-latest
    outputs:
      all_tags: ${{ steps.filter_tags.outputs.all_tags }}
      all_versions: ${{ steps.filter_tags.outputs.all_versions }}
    steps:
      - name: Fetch all tags from Docker Hub
        id: fetch_tags
        run: |
          set -e
          echo "Fetching all tags from Docker Hub for ${{ inputs.repo }}..."

          # Try to authenticate if credentials are provided
          AUTH_TOKEN=""
          if [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "Using authenticated Docker Hub API access"
            AUTH_RESPONSE=$(curl -s -H "Content-Type: application/json" \
              -X POST -d '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_TOKEN }}"}' \
              https://hub.docker.com/v2/users/login/)

            # Check if authentication was successful
            if [[ $(echo "$AUTH_RESPONSE" | jq -r '.token // empty') != "" ]]; then
              AUTH_TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.token')
              echo "Successfully authenticated with Docker Hub"
            else
              echo "Authentication failed, will proceed with anonymous access"
            fi
          else
            echo "No Docker Hub credentials provided, using anonymous access"
          fi

          # Paginate through Docker Hub API to get all tags
          REPO="${{ inputs.repo }}"
          PAGE_SIZE=100
          PAGE=1
          TAGS_FILE="/tmp/dockerhub-tags.json"
          > "$TAGS_FILE"

          # Retry settings
          MAX_RETRIES=5
          RETRY_WAIT=10

          # Fetch tags with retry logic
          function fetch_page() {
            local url=$1
            local retry=0
            local wait_time=$RETRY_WAIT
            local http_code
            local response_body

            while [[ $retry -lt $MAX_RETRIES ]]; do
              if [[ -n "$AUTH_TOKEN" ]]; then
                # Use authenticated request
                response=$(curl -s -w "%{http_code}" \
                  -H "Authorization: JWT $AUTH_TOKEN" \
                  -H "User-Agent: GitHub-Actions-DockerHub-Tag-Discovery" \
                  -o "/tmp/response_body.json" "$url")
              else
                # Use anonymous request
                response=$(curl -s -w "%{http_code}" \
                  -H "User-Agent: GitHub-Actions-DockerHub-Tag-Discovery" \
                  -o "/tmp/response_body.json" "$url")
              fi

              http_code=$response

              if [[ $http_code -eq 429 ]]; then
                # Rate limited, retry after waiting
                echo "Rate limited (HTTP 429). Retrying after $wait_time seconds..."
                sleep $wait_time
                retry=$((retry + 1))
                wait_time=$((wait_time * 2))
              elif [[ $http_code -ge 200 && $http_code -lt 300 ]]; then
                # Success, return the response body
                cat "/tmp/response_body.json"
                return 0
              else
                # Other error
                echo "Error $http_code from Docker Hub API:"
                cat "/tmp/response_body.json"

                if [[ $retry -ge $((MAX_RETRIES - 1)) ]]; then
                  echo "Max retries reached. Failing."
                  return 1
                fi

                echo "Retrying after $wait_time seconds..."
                sleep $wait_time
                retry=$((retry + 1))
                wait_time=$((wait_time * 2))
              fi
            done

            return 1
          }

          while :; do
            URL="https://hub.docker.com/v2/repositories/${REPO}/tags?page_size=${PAGE_SIZE}&page=${PAGE}"
            echo "Fetching page $PAGE from $URL"

            RESP=$(fetch_page "$URL")
            if [[ $? -ne 0 ]]; then
              echo "Failed to fetch tags from Docker Hub after multiple retries"
              exit 1
            fi

            COUNT=$(echo "$RESP" | jq '.results | length')
            echo "$RESP" | jq -c '.results[]' >> "$TAGS_FILE"
            NEXT=$(echo "$RESP" | jq -r '.next')

            if [ "$NEXT" = "null" ] || [ "$COUNT" -eq 0 ]; then
              break
            fi

            PAGE=$((PAGE+1))
          done

          # Output summary
          TAG_COUNT=$(cat "$TAGS_FILE" | wc -l)
          echo "Retrieved $TAG_COUNT tags from Docker Hub for ${{ inputs.repo }}"

      - name: Filter tags by pattern and minimum version
        id: filter_tags
        run: |
          TAG_PATTERN="${{ inputs.tag_pattern }}"
          MIN_VERSION="${{ inputs.min_version }}"

          # Extract all tags matching the pattern
          ALL_TAGS=$(cat "/tmp/dockerhub-tags.json" | jq -r '.name' | grep -E "$TAG_PATTERN" || echo "")
          ALL_TAGS=$(echo "$ALL_TAGS" | sort -V)
          ALL_TAGS_COUNT=$(echo "$ALL_TAGS" | grep -v '^$' | wc -l)
          echo "Found $ALL_TAGS_COUNT tags matching pattern '$TAG_PATTERN'"

          # Extract versions from tags (remove prefix)
          ALL_VERSIONS=$(echo "$ALL_TAGS" | sed 's/^ubuntu-//')

          # Filter versions by minimum version
          if [[ "$MIN_VERSION" != "0.0.0" ]]; then
            echo "Filtering versions >= $MIN_VERSION"
            FILTERED_VERSIONS=$(echo "$ALL_VERSIONS" | awk -v min="$MIN_VERSION" '
              function version_compare(ver1, ver2,    v1, v2, i) {
                split(ver1, v1, ".");
                split(ver2, v2, ".");
                for (i = 1; i <= 3; i++) {
                  if (v1[i] + 0 < v2[i] + 0) return -1;
                  if (v1[i] + 0 > v2[i] + 0) return 1;
                }
                return 0;
              }
              version_compare($0, min) >= 0 { print $0 }
            ')
            ALL_VERSIONS="$FILTERED_VERSIONS"
          fi

          # Count final versions
          FINAL_COUNT=$(echo "$ALL_VERSIONS" | grep -v '^$' | wc -l)
          echo "Final version count: $FINAL_COUNT"

          # Create comma-separated list for output
          ALL_TAGS_CSV=$(echo "$ALL_TAGS" | grep -v '^$' | tr '\n' ',' | sed 's/,$//')
          ALL_VERSIONS_CSV=$(echo "$ALL_VERSIONS" | grep -v '^$' | tr '\n' ',' | sed 's/,$//')

          # Set outputs
          echo "all_tags=$ALL_TAGS_CSV" >> $GITHUB_OUTPUT
          echo "all_versions=$ALL_VERSIONS_CSV" >> $GITHUB_OUTPUT

          # Add to step summary
          echo "## Docker Hub Tag Discovery" >> $GITHUB_STEP_SUMMARY
          echo "| Description | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| ----------- | ----- |" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | ${{ inputs.repo }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tag Pattern | $TAG_PATTERN |" >> $GITHUB_STEP_SUMMARY
          echo "| Minimum Version | $MIN_VERSION |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tags Found | $ALL_TAGS_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| Filtered Version Count | $FINAL_COUNT |" >> $GITHUB_STEP_SUMMARY
