name: -- reusable -- Expand Versions to Include All Patches

on:
  workflow_call:
    inputs:
      versions:
        required: true
        type: string
        description: "Comma-separated list of versions to expand (e.g., '7.0.9,7.2.3')"
    outputs:
      expanded_versions:
        description: "Expanded versions as comma-separated list"
        value: ${{ jobs.expand-versions.outputs.expanded_versions }}
      matrix:
        description: "Build matrix with expanded versions"
        value: ${{ jobs.expand-versions.outputs.matrix }}

jobs:
  expand-versions:
    runs-on: ubuntu-latest
    outputs:
      expanded_versions: ${{ steps.expand.outputs.expanded_versions }}
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Expand versions to include all patches
        id: expand
        run: |
          set -e
          VERSIONS="${{ inputs.versions }}"
          echo "Input versions: $VERSIONS"

          # Convert comma-separated list to line-based list
          VERSIONS_LIST=$(echo "$VERSIONS" | tr ',' '\n')

          # Create a temporary directory to hold expanded versions
          mkdir -p /tmp/expanded_versions

          # Process each version to expand its major.minor series
          while IFS= read -r VERSION; do
            # Skip empty lines
            [ -z "$VERSION" ] && continue

            # Extract major.minor from version
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1-2)
            PATCH=$(echo "$VERSION" | cut -d. -f3)

            echo "Processing version $VERSION (Major.Minor: $MAJOR_MINOR, Patch: $PATCH)"

            # Generate sequence from 0 to patch for this major.minor
            for ((i=0; i<=$PATCH; i++)); do
              FULL_VERSION="$MAJOR_MINOR.$i"
              echo "Adding $FULL_VERSION to expanded list"
              echo "$FULL_VERSION" >> /tmp/expanded_versions/all_versions.txt
            done
          done <<< "$VERSIONS_LIST"

          # Remove duplicates and sort
          if [ -f "/tmp/expanded_versions/all_versions.txt" ]; then
            EXPANDED_VERSIONS=$(sort -V -u /tmp/expanded_versions/all_versions.txt)
            echo "Expanded versions: $(echo "$EXPANDED_VERSIONS" | tr '\n' ', ' | sed 's/,$//')"

            # Convert to comma-separated list
            EXPANDED_CSV=$(echo "$EXPANDED_VERSIONS" | tr '\n' ',' | sed 's/,$//')
            echo "expanded_versions=$EXPANDED_CSV" >> $GITHUB_OUTPUT

            # Add to step summary
            echo "## Version Expansion" >> $GITHUB_STEP_SUMMARY
            echo "| Description | Value |" >> $GITHUB_STEP_SUMMARY
            echo "| ----------- | ----- |" >> $GITHUB_STEP_SUMMARY
            echo "| Input Version Count | $(echo "$VERSIONS_LIST" | grep -v '^$' | wc -l) |" >> $GITHUB_STEP_SUMMARY
            echo "| Expanded Version Count | $(echo "$EXPANDED_VERSIONS" | grep -v '^$' | wc -l) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "No versions expanded"
            echo "expanded_versions=" >> $GITHUB_OUTPUT

            echo "## Version Expansion" >> $GITHUB_STEP_SUMMARY
            echo "No versions to expand" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate matrix from expanded versions
        id: generate-matrix
        run: |
          EXPANDED_VERSIONS=$(echo "${{ steps.expand.outputs.expanded_versions }}" | tr ',' '\n')

          # Check if we have any versions
          if [ -z "$EXPANDED_VERSIONS" ]; then
            echo "No versions to include in matrix"
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi

          # Create matrix JSON
          MATRIX_JSON=$(echo "$EXPANDED_VERSIONS" | grep -v '^$' | jq -Rs '
            split("\n")
            | map(select(length > 0))
            | map({
                "zabbix_version": .,
                "major_minor": (split(".") | .[0:2] | join(".") | tostring),
                "is_latest": "false"
              })
            | {"include": .}
          ' | tr -d '\n')

          echo "Generated matrix:"
          echo "$MATRIX_JSON" | jq .

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
