name: -- reusable -- Update Documentation

on:
  workflow_call:
    inputs:
      latest_version:
        required: true
        type: string
      lts_version:
        required: true
        type: string
      all_versions:
        required: true
        type: string

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Update README with version table
        id: update_readme
        run: |
          LATEST_VERSION='${{ inputs.latest_version }}'
          LTS_VERSION='${{ inputs.lts_version }}'
          ALL_VERSIONS='${{ inputs.all_versions }}'

          echo "Latest version: $LATEST_VERSION"
          echo "LTS version: $LTS_VERSION"
          echo "All versions: $ALL_VERSIONS"

          if [[ -n "$LATEST_VERSION" && -f "README.md" ]]; then
            echo "Updating README.md with version information..."

            TABLE="## Available Versions"
            TABLE+="\n"
            TABLE+="\n| Version | Tags | Description |"
            TABLE+="\n|---------|------|-------------|"

            for VERSION in $(echo "${ALL_VERSIONS%,}" | tr ',' ' ' | sort -Vr); do
              [[ -z "$VERSION" ]] && continue
              MAJOR=$(echo "$VERSION" | cut -d. -f1)
              MINOR=$(echo "$VERSION" | cut -d. -f2)
              if [[ "$VERSION" == "$LTS_VERSION" ]]; then
                TABLE+="\n| $VERSION | \`lts\`, \`$VERSION\`, \`$MAJOR.$MINOR\` | LTS (Long-Term Support) version |"
              elif [[ "$VERSION" == "$LATEST_VERSION" ]]; then
                TABLE+="\n| $VERSION | \`latest\`, \`$VERSION\`, \`$MAJOR.$MINOR\` | Latest bleeding edge version |"
              else
                TABLE+="\n| $VERSION | \`$VERSION\`, \`$MAJOR.$MINOR\` | Supported version |"
              fi
            done

            TABLE+="\n\n> **Note:** The \`latest\` tag follows Zabbix's upstream latest version ($LATEST_VERSION), while the \`lts\` tag points to the Long-Term Support version ($LTS_VERSION)."

            if grep -q "## Available Versions" README.md; then
              START_LINE=$(grep -n "## Available Versions" README.md | cut -d: -f1)
              NEXT_SECTION=$(tail -n +$((START_LINE + 1)) README.md | grep -n "^## " | head -n1 | cut -d: -f1)
              if [[ -n "$NEXT_SECTION" ]]; then
                END_LINE=$((START_LINE + NEXT_SECTION))
                head -n $((START_LINE - 1)) README.md > README.md.tmp
                echo -e "$TABLE" >> README.md.tmp
                tail -n +$END_LINE README.md >> README.md.tmp
                mv README.md.tmp README.md
              else
                head -n $((START_LINE - 1)) README.md > README.md.tmp
                echo -e "$TABLE" >> README.md.tmp
                mv README.md.tmp README.md
              fi
            else
              INTRO_LINE=$(grep -n "It includes a few additional binaries and scripts" README.md | cut -d: -f1)
              if [[ -n "$INTRO_LINE" ]]; then
                head -n "$INTRO_LINE" README.md > README.md.tmp
                echo -e "\n$TABLE" >> README.md.tmp
                tail -n +$((INTRO_LINE + 1)) README.md >> README.md.tmp
                mv README.md.tmp README.md
              fi
            fi
            echo "Updated README.md with version information"
          else
            echo "Warning: No version data or README.md not found"
          fi

      - name: Update GitHub organization references
        id: update_org_refs
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          echo "Repository owner: $REPO_OWNER"
          echo "Repository name: $REPO_NAME"
          if [[ -f "README.md" ]]; then
            echo "Updating GitHub organization references in README.md..."
            # Single sed command with multi-pattern search - handles all domain types at once
            sed -i -E 's@(github\.com|ghcr\.io|img\.shields\.io/github[^/]*/)[^/]+/('$REPO_NAME')@\1'$REPO_OWNER'/\2@g' README.md
            echo "Updated all GitHub organization references"
          else
            echo "Warning: README.md not found"
          fi

      - name: Commit changes back to repository
        id: commit_changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Check if there are changes to commit
          if git diff --exit-code README.md; then
            echo "No changes to commit."
          else
            echo "Changes detected in README.md, committing..."
            git add README.md
            git commit -m "Update README.md with latest version information"
            git push
            echo "Changes committed and pushed."
          fi
