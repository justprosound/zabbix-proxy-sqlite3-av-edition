name: -- reusable -- Version Detection

on:
  workflow_call:
    outputs:
      latest_version:
        description: "Latest stable Zabbix version (highest version number, e.g., 7.2.7 > 7.0.13)"
        value: ${{ jobs.zabbix-version-detection.outputs.latest_version }}
      lts_version:
        description: "LTS Zabbix version (current LTS release from upstream Zabbix)"
        value: ${{ jobs.zabbix-version-detection.outputs.lts_version }}
      all_versions:
        description: "All supported Zabbix versions (comma-separated)"
        value: ${{ jobs.zabbix-version-detection.outputs.all_versions }}
      matrix:
        description: "JSON matrix for building containers"
        value: ${{ jobs.zabbix-version-detection.outputs.matrix }}

jobs:
  zabbix-version-detection:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_version: ${{ steps.fetch_zabbix_versions.outputs.latest_version }}
      lts_version: ${{ steps.fetch_zabbix_versions.outputs.lts_version }}
      all_versions: ${{ steps.fetch_zabbix_versions.outputs.all_versions }}
      matrix: ${{ steps.generate_build_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch and save official Zabbix versions
        id: fetch_zabbix_versions
        run: |
          # Fetch Zabbix version data
          echo "Fetching data from Zabbix API..."
          curl -s -f -S "https://services.zabbix.com/updates/v1" > .github/zabbix-versions.json || {
            echo "::error::Failed to fetch Zabbix version data from API"
            exit 1
          }

          # Validate the JSON response
          if ! jq . .github/zabbix-versions.json > /dev/null; then
            echo "::error::Invalid JSON received from Zabbix API"
            cat .github/zabbix-versions.json | head -n 50
            exit 1
          fi

          # Extract supported versions
          SUPPORTED_VERSIONS=$(jq -r '.versions[] | select(.end_of_full_support == false) | .latest_release.release' .github/zabbix-versions.json | sort -V)
          if [ -z "$SUPPORTED_VERSIONS" ]; then
            echo "::error::No supported versions found in Zabbix API response"
            cat .github/zabbix-versions.json | jq .
            exit 1
          fi

          # Identify LTS version (x.0.x format)
          # LTS = current LTS release (usually x.0.x format from upstream Zabbix)
          LTS_VERSION=""
          for VERSION in $SUPPORTED_VERSIONS; do
            [[ -z "$VERSION" ]] && continue
            MINOR=$(echo "$VERSION" | cut -d. -f2)
            if [[ "$MINOR" == "0" ]]; then
              LTS_VERSION="$VERSION"
              echo "Found LTS version: $LTS_VERSION (x.0.x pattern - current LTS release)"
            fi
          done

          # Fallback if no LTS found - still need to define a current LTS release
          if [[ -z "$LTS_VERSION" ]]; then
            LTS_VERSION=$(echo "$SUPPORTED_VERSIONS" | head -n1)
            echo "No LTS version with x.0.x pattern found, using oldest version as current LTS release: $LTS_VERSION"
          fi

          # Get latest version (highest version number)
          # Latest = highest version number regardless of release date
          LATEST_VERSION=$(echo "$SUPPORTED_VERSIONS" | sort -V | tail -n1)
          echo "Latest version: $LATEST_VERSION (highest version number)"
          echo "LTS version: $LTS_VERSION (current LTS release from upstream Zabbix)"
          echo "All supported versions: $SUPPORTED_VERSIONS"

          # Set outputs for next steps
          echo "latest_version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "lts_version=$LTS_VERSION" >> "$GITHUB_OUTPUT"
          echo "all_versions=$(echo "$SUPPORTED_VERSIONS" | tr '\n' ',')" >> "$GITHUB_OUTPUT"

          # Add to step summary
          echo "## Zabbix Version Detection" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Version | Description |" >> $GITHUB_STEP_SUMMARY
          echo "| ---- | ------- | ----------- |" >> $GITHUB_STEP_SUMMARY
          echo "| Latest | $LATEST_VERSION | Highest version number (e.g., 7.2.7 > 7.0.13) |" >> $GITHUB_STEP_SUMMARY
          echo "| LTS | $LTS_VERSION | Current LTS release from upstream Zabbix |" >> $GITHUB_STEP_SUMMARY
          echo "| All Supported | $(echo "$SUPPORTED_VERSIONS" | tr '\n' ', ') | All versions tracked by upstream Zabbix |" >> $GITHUB_STEP_SUMMARY

      - name: Generate build matrix for Zabbix versions
        id: generate_build_matrix
        run: |
          SUPPORTED_VERSIONS=$(jq -r '.versions[] | select(.end_of_full_support == false) | .latest_release.release' .github/zabbix-versions.json | sort -V)
          LTS_VERSION="${{ steps.fetch_zabbix_versions.outputs.lts_version }}"

          # Create the matrix JSON with proper string escaping
          echo "Building matrix with these versions: $SUPPORTED_VERSIONS"
          echo "LTS version (current LTS release): $LTS_VERSION"

          # Use jq to properly create and escape the JSON - ensure all values are treated as strings
          # Get the latest version (highest version number)
          LATEST_VERSION=$(echo "$SUPPORTED_VERSIONS" | sort -V | tail -n1)

          # Create matrix with both LTS (current LTS release) and Latest (highest version number) flags
          MATRIX_JSON=$(echo "$SUPPORTED_VERSIONS" | tr ' ' '\n' | grep -v '^$' | jq --arg lts "$LTS_VERSION" --arg latest "$LATEST_VERSION" -Rs '
            split("\n")
            | map(select(length > 0))
            | map({
                "zabbix_version": .,
                "major_minor": (split(".") | .[0:2] | join(".") | tostring),
                "is_lts": (if . == $lts then "true" else "false" end),
                "is_latest": (if . == $latest then "true" else "false" end)
              })
            | {"include": .}
          ' | tr -d '\n')

          # Output sanitized JSON and validate it
          echo "Generated matrix with proper version tagging (LTS = current LTS release, Latest = highest version number):"
          echo "$MATRIX_JSON" | jq .

          # Validate JSON before setting output
          if ! echo "$MATRIX_JSON" | jq . > /dev/null; then
            echo "::error::Generated matrix is not valid JSON. Check the matrix generation logic."
            exit 1
          fi

          # Additional validation: check that the JSON has the expected structure
          INCLUDE_COUNT=$(echo "$MATRIX_JSON" | jq '.include | length')
          if [[ "$INCLUDE_COUNT" -lt 1 ]]; then
            echo "::error::Matrix JSON is invalid: No items in 'include' array"
            echo "$MATRIX_JSON" | jq .
            exit 1
          fi

          # Validate first matrix item to ensure values are strings
          FIRST_ITEM=$(echo "$MATRIX_JSON" | jq -r '.include[0]')
          echo "First matrix item (for validation): $FIRST_ITEM"

          # Check value types for matrix properties
          ZVERSION_TYPE=$(echo "$MATRIX_JSON" | jq -r '.include[0].zabbix_version | type')
          MAJORMINOR_TYPE=$(echo "$MATRIX_JSON" | jq -r '.include[0].major_minor | type')
          ISLTS_TYPE=$(echo "$MATRIX_JSON" | jq -r '.include[0].is_lts | type')
          ISLATEST_TYPE=$(echo "$MATRIX_JSON" | jq -r '.include[0].is_latest | type')

          echo "zabbix_version value type: $ZVERSION_TYPE (should be 'string')"
          echo "major_minor value type: $MAJORMINOR_TYPE (should be 'string')"
          echo "is_lts value type: $ISLTS_TYPE (should be 'string') - identifies current LTS release"
          echo "is_latest value type: $ISLATEST_TYPE (should be 'string') - identifies highest version number"

          if [[ "$ZVERSION_TYPE" != "string" || "$MAJORMINOR_TYPE" != "string" ||
                "$ISLTS_TYPE" != "string" || "$ISLATEST_TYPE" != "string" ]]; then
            echo "::error::Matrix values must be strings, not numbers. Got types:"
            echo "::error::zabbix_version=$ZVERSION_TYPE,"
            echo "::error::major_minor=$MAJORMINOR_TYPE,"
            echo "::error::is_lts (current LTS)=$ISLTS_TYPE,"
            echo "::error::is_latest (highest version number)=$ISLATEST_TYPE"
            exit 1
          fi

          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

          # Add validation info to workflow summary
          echo "## Matrix Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Version | Major.Minor | Is LTS (Current LTS) | Is Latest (Highest Version) |" >> $GITHUB_STEP_SUMMARY
          echo "| ------- | ----------- | -------------------- | -------------------------- |" >> $GITHUB_STEP_SUMMARY
          for VERSION in $SUPPORTED_VERSIONS; do
            [[ -z "$VERSION" ]] && continue
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1,2)
            IS_LTS="No"
            IS_LATEST="No"
            if [[ "$VERSION" == "$LTS_VERSION" ]]; then IS_LTS="Yes"; fi
            if [[ "$VERSION" == "$LATEST_VERSION" ]]; then IS_LATEST="Yes"; fi
            echo "| $VERSION | $MAJOR_MINOR | $IS_LTS | $IS_LATEST |" >> $GITHUB_STEP_SUMMARY
          done
