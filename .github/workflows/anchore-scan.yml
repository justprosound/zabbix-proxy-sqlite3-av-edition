name: Anchore Container Scan

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to scan (default: latest)'
        required: false
        default: 'latest'
      severity_cutoff:
        description: 'Minimum vulnerability severity to fail the build'
        required: false
        default: 'high'
        type: choice
        options: ['negligible', 'low', 'medium', 'high', 'critical']

# Security: Minimal required permissions
permissions:
  contents: read
  packages: read
  security-events: write  # For security scanning

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Set up environment variables
      - name: Set environment variables
        id: vars
        run: |
          IMAGE_TAG="${{ inputs.image_tag }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"

          echo "Scanning image: ghcr.io/${REPO_OWNER}/${REPO_NAME}:${IMAGE_TAG}"
          echo "image_to_scan=ghcr.io/${REPO_OWNER}/${REPO_NAME}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      # Login to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Pull the image
      - name: Pull container image
        run: |
          docker pull ${{ steps.vars.outputs.image_to_scan }}

      # Scan image with Anchore
      - name: Scan image with Anchore
        uses: anchore/scan-action@v6
        id: anchore_scan
        with:
          image: ${{ steps.vars.outputs.image_to_scan }}
          fail-build: true
          severity-cutoff: ${{ inputs.severity_cutoff }}
          output-format: sarif

      # Upload scan results to GitHub Security tab
      - name: Upload Anchore scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.anchore_scan.outputs.sarif }}
          category: "anchore-${{ inputs.image_tag }}"

      # Generate comprehensive vulnerability report
      - name: Generate vulnerability report
        if: always()
        run: |
          echo "# Container Vulnerability Scan Results" > vulnerability-report.md
          echo "## Image: ${{ steps.vars.outputs.image_to_scan }}" >> vulnerability-report.md
          echo "## Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> vulnerability-report.md
          echo "## Scan Status: ${{ steps.anchore_scan.outcome }}" >> vulnerability-report.md
          echo "## Severity Cutoff: ${{ inputs.severity_cutoff }}" >> vulnerability-report.md
          echo "" >> vulnerability-report.md

          if [[ -f "${{ steps.anchore_scan.outputs.json }}" ]]; then
            echo "### Vulnerabilities Found" >> vulnerability-report.md
            echo '```json' >> vulnerability-report.md
            jq -r '.matches | length' ${{ steps.anchore_scan.outputs.json }} >> vulnerability-report.md
            echo '```' >> vulnerability-report.md

            echo "### Summary by Severity" >> vulnerability-report.md
            echo '```' >> vulnerability-report.md
            jq -r '.matches[] | .vulnerability.severity' ${{ steps.anchore_scan.outputs.json }} | sort | uniq -c >> vulnerability-report.md
            echo '```' >> vulnerability-report.md
          else
            echo "No detailed vulnerability information available" >> vulnerability-report.md
          fi

      # Upload vulnerability report as artifact
      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ inputs.image_tag }}
          path: vulnerability-report.md
          retention-days: 30
